<?xml version="1.0" ?>
<schema name="farcrysolrpro" version="1.0">
	
	<types>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in the
       org.apache.solr.analysis package.
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldtype name="binary" class="solr.BinaryField"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
	       This includes "string","boolean", and, as of 3.5 (and 4.x),
	       int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->    

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
    -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>


    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         purposes.  The ordering is generated based on the field name 
         and the version of the index, As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the name
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true" />

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
	 removes stop words from case-insensitive "stopwords.txt"
	 (empty by default), and down cases.  At query time only, it
	 also applies synonyms. -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
      	<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
		<tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<filter 
			class="solr.WordDelimiterFilterFactory"
			generateWordParts="1"
			generateNumberParts="1"
			catenateWords="1"
			preserveOriginal="1"
			splitOnCaseChange="1"
			protected="protwords.txt"
		 />
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

		<fieldType name="textspell" class="solr.TextField" positionIncrementGap="100">
			<analyzer>
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.StandardFilterFactory"/>
				<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
			</analyzer>
		</fieldType>
		<fieldType name="textspellphrase" class="solr.TextField" positionIncrementGap="100">
			<analyzer>
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
		</fieldType>

    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
      		<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
			<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1"/>
			<filter class="solr.DoubleMetaphoneFilterFactory" inject="false" maxCodeLength="8"/>
		</analyzer>
    </fieldtype>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  --> 
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

   <!--
    A Geohash is a compact representation of a latitude longitude pair in a single field.
    See http://wiki.apache.org/solr/SpatialSearch
   -->
    <fieldtype name="geohash" class="solr.GeoHashField"/>
    
    <fieldType name="cleanforelevation" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
       	<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern=" AND \(fcsp_sitename:([^)]+)\)" replacement="" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern=" AND \((typename:([^)]+)( OR )?)+\)" replacement="" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern=" AND fcsp_benablesearch:(true|false)" replacement="" />
      </analyzer>
    </fieldType>
     
 </types>
	
	<fields>
		
		<!-- leaving default of omitNorms as false so we can do index time boosting per field -->
		
		<!-- base FarCry fields -->
		
		<field name="objectid" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		<field name="label" type="text" indexed="true" stored="true" required="true" multiValued="false" />
		<field name="datetimecreated" type="date" indexed="true" stored="true" required="false" multiValued="false" />
		<field name="datetimelastupdated" type="date" indexed="true" stored="true" required="false" multiValued="false" />
		<field name="createdby" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		<field name="lastupdatedby" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		<field name="ownedby" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		<field name="typename" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		
		<!-- we do not need to track these -->
		<field name="locked" type="ignored" indexed="false" stored="false" required="false" />
		<field name="lockedby" type="ignored" indexed="false" stored="false" required="false" />
		<field name="versionid" type="ignored" indexed="false" stored="false" required="false" />
		<field name="status" type="ignored" indexed="false" stored="false" required="false" />
		
		<!-- fields to store rule content -->
		<field name="fcsp_rulecontent" type="text" indexed="true" stored="false" required="false" multiValued="true" />
		<field name="fcsp_rulecontent_phonetic" type="phonetic" indexed="true" stored="false" required="false" multiValued="true" />
		
		<!-- a field to use for random sorting -->
		<field name="fcsp_random" type="random" multiValued="false" />
		
		<!-- field to store spellchecker data -->
		<field name="fcsp_spell" type="textspell" indexed="true" stored="false" required="false" multiValued="true" />
		<field name="fcsp_spellphrase" type="textspellphrase" indexed="true" stored="false" required="false" multiValued="true" />
		
		<field name="fcsp_highlight" type="text" indexed="false" stored="true" required="false" multiValued="true" />

		<!-- field to store document size -->
		<field name="fcsp_documentsize" type="long" indexed="true" stored="true" required="false" multiValued="false" />

		<!-- field to store the site this record came from. (used when multiple sites share a common solr core) -->
		<field name="fcsp_sitename" type="text" indexed="true" stored="true" required="true" multiValued="false" />
		<field name="fcsp_benablesearch" type="boolean" indexed="true" stored="true" required="true" multiValued="false" />

		<!-- a unique id -->
		<field name="fcsp_id" type="string" indexed="true" stored="true" required="true" multiValued="false" />

		<!-- dynamic fields -->

		<!-- NOTE: fc* prefixed fields are FarCry Solr Pro plugin specific.  fcDataTypes indicates FarCry datatypes that the Solr field is suggested for.  If unsure, or it doesn't match up well with a FarCry datatype, leave it blank. -->
		
		<!-- 
		
			required dynamic field naming convention:
			*_<fcId>_<stored | notstored>
			
			ex:
			
			a FarCry field called "body" stored in a "text" field in Solr would be mapped to:
			
			body_text_stored
			
			a FarCry field called "title" not stored in a "string" field in Solr would be mapped to:
			
			title_string_notstored
			
		-->
		
		<dynamicField name="ignored_*" type="ignored" indexed="false" stored="false"/>
		
		<dynamicField name="*_int_stored" type="int" fcDisplayName="Integer" fcId="int" fcDataTypes="integer,numeric,boolean" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_int_notstored" type="int" fcDisplayName="Integer" fcId="int" fcDataTypes="integer,numeric,boolean" indexed="true" stored="false" multiValued="false"/>
		
		<dynamicField name="*_string_stored" type="string" fcDisplayName="String" fcId="string" fcDataTypes="string,nstring,longchar,variablename,email,color,uuid" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_string_notstored" type="string" fcDisplayName="String" fcId="string" fcDataTypes="string,nstring,longchar,variablename,email,color,uuid" indexed="true" stored="false" multiValued="false" />
		
		<dynamicField name="*_array_stored" type="string" fcDisplayName="Array" fcId="array" fcDataTypes="array" indexed="true" stored="true" multiValued="true" />
		<dynamicField name="*_array_notstored" type="string" fcDisplayName="Array" fcId="array" fcDataTypes="array" indexed="true" stored="false" multiValued="true" />
		
		<dynamicField name="*_long_stored"  type="long" fcDisplayName="Long Integer" fcId="long" fcDataTypes="integer,numeric" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_long_notstored"  type="long" fcDisplayName="Long Integer" fcId="long" fcDataTypes="integer,numeric" indexed="true" stored="false" multiValued="false"/>
		
		<!-- using the text fields, and will ship with a stopwords.txt file that assumes english.  users are free to add their own field types and use a language specific stopwords file -->
		<dynamicField name="*_text_stored"  type="text" fcDisplayName="Text" fcId="text" fcDataTypes="string,nstring,longchar,variablename,email,color,uuid" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_text_notstored"  type="text" fcDisplayName="Text" fcId="text" fcDataTypes="string,nstring,longchar,variablename,email,color,uuid" indexed="true" stored="false" multiValued="false"/>
		
		<dynamicField name="*_boolean_stored"  type="boolean" fcDisplayName="Boolean" fcId="boolean" fcDataTypes="boolean" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_boolean_notstored"  type="boolean" fcDisplayName="Boolean" fcId="boolean" fcDataTypes="boolean" indexed="true" stored="false" multiValued="false" />
		
		<dynamicField name="*_float_stored"  type="float" fcDisplayName="Float" fcId="float" fcDataTypes="numeric" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_float_notstored"  type="float" fcDisplayName="Float" fcId="float" fcDataTypes="numeric" indexed="true" stored="false" multiValued="false"/>
		
		<dynamicField name="*_double_stored"  type="double" fcDisplayName="Double" fcId="double" fcDataTypes="numeric" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_double_notstored"  type="double" fcDisplayName="Double" fcId="double" fcDataTypes="numeric" indexed="true" stored="false" multiValued="false"/>
		
		<dynamicField name="*_date_stored" type="date" fcDisplayName="Date" fcId="date" fcDataTypes="date" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_date_notstored" type="date" fcDisplayName="Date" fcId="date" fcDataTypes="date" indexed="true" stored="false" multiValued="false"/>
		
		<dynamicField name="*_location_stored" type="location" fcDisplayName="Latitude,Longitude" fcDataTypes="" fcId="location" indexed="true" stored="true" multiValued="false"/>
		<dynamicField name="*_location_notstored" type="location" fcDisplayName="Latitude,Longitude" fcDataTypes="" fcId="location" indexed="true" stored="false" multiValued="false"/>
		
		<dynamicField name="*_phonetic_stored" type="phonetic" fcDisplayName="Phonetic" fcId="phonetic" fcDataTypes="string,nstring,longchar,variablename,email,color" indexed="true" stored="true" multiValued="true" />
		<dynamicField name="*_phonetic_notstored" type="phonetic" fcDisplayName="Phonetic" fcId="phonetic" fcDataTypes="string,nstring,longchar,variablename,email,color" indexed="true" stored="false" multiValued="true" />
		
	</fields>
	
	<copyField source="*_text_stored" dest="fcsp_spell" />
	<copyField source="*_text_notstored" dest="fcsp_spell" />
	<copyField source="*_string_notstored" dest="fcsp_spell" />
	<copyField source="*_string_stored" dest="fcsp_spell" />
	<copyField source="label" dest="fcsp_spell" />
	<copyField source="fcsp_rulecontent" dest="fcsp_spell" />
	<copyField source="fcsp_spell" dest="fcsp_spellphrase" />
	
	<uniqueKey>fcsp_id</uniqueKey>
	
	<!-- field for the QueryParser to use when an explicit fieldname is absent -->
 	<defaultSearchField>label</defaultSearchField>

 	<!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 	<!-- https://issues.apache.org/jira/browse/SOLR-2649: defaultOperator and q.op should set mm but there is a bug that prevents it -->
 	<solrQueryParser defaultOperator="OR"/>
	
</schema>